package com.kun;

import java.util.*;

public class FastPath_1976 {
    public static void main(String[] args) {

        FastPath_1976 fastPath1976 = new FastPath_1976();
        int[][] roads = new int[][]{{0,6,7},{0,1,2},{1,2,3},{1,3,3},{6,3,3},{3,5,1},{6,5,1},{2,5,1},{0,4,5},{4,6,2}};
        int ret = fastPath1976.countPaths(7,roads);
        System.out.println("Total solution = " + ret);

        int[][] roads2 = new int[][] {{0,1,4233},{1,2,5402},{0,3,17153},{2,3,7518},{3,1,12920},{0,4,25},{0,5,26859},{5,2,17224},{5,4,26834},{5,1,22626},{3,5,9706},{6,5,1669},{6,2,18893},{0,6,28528},{6,3,11375},{6,4,28503},{6,1,24295},{7,2,3378},{0,8,36208},{8,4,36183},{6,8,7680},{0,9,46027},{4,9,46002},{9,7,33014},{2,9,36392},{9,8,9819},{9,6,17499},{9,3,28874},{9,1,41794},{9,10,5734},{5,10,24902},{2,10,42126},{1,10,47528},{10,8,15553},{7,10,38748},{9,11,8417},{11,3,37291},{10,11,2683},{6,11,25916},{11,4,54419},{12,7,47736},{3,12,43596},{5,12,33890},{10,12,8988},{12,6,32221},{11,12,6305},{12,1,56516},{12,2,51114},{13,1,60560},{2,13,55158},{13,11,10349},{13,4,64768},{0,13,64793},{9,13,18766},{13,6,36265},{7,13,51780},{13,10,13032},{12,13,4044},{5,13,37934},{3,13,47640},{8,14,32645},{14,4,68828},{0,14,68853},{7,14,55840},{14,3,51700},{14,5,41994},{14,13,4060},{11,14,14409},{5,15,50783},{8,15,41434},{15,9,31615},{15,14,8789},{4,15,77617},{15,6,49114},{0,15,77642},{2,15,68007},{12,15,16893},{1,15,73409},{15,13,12849},{15,3,60489},{7,15,64629},{11,15,23198},{15,10,25881},{16,13,20123},{16,1,80683},{15,16,7274},{16,0,84916},{16,6,56388},{16,3,67763},{17,3,75033},{17,15,14544},{0,17,92186},{1,17,87953},{17,5,65327},{2,17,82551},{17,13,27393},{16,17,7270},{17,4,92161},{17,10,40425},{14,17,23333},{17,12,31437},{17,9,46159},{18,7,80595},{18,3,76455},{5,18,66749},{8,18,57400},{9,18,47581},{11,18,39164},{4,18,93583},{18,17,1422},{18,12,32859},{0,18,93608},{15,18,15966},{16,18,8692},{14,18,24755},{6,18,65080},{19,16,12261},{15,19,19535},{19,7,84164},{19,18,3569},{19,6,68649},{8,19,60969},{19,1,92944},{5,19,70318},{10,19,45416},{19,11,42733},{2,19,87542},{20,13,33827},{20,15,20978},{20,0,98620},{20,16,13704},{10,20,46859},{20,14,29767},{20,3,81467},{18,20,5012},{12,20,37871},{20,8,62412},{20,4,98595},{20,11,44176},{2,20,88985},{1,20,94387},{20,5,71761},{19,20,1443},{16,21,19446},{17,21,12176},{0,21,104362},{21,7,91349},{8,21,68154},{21,3,87209},{18,21,10754},{21,20,5742},{1,21,100129},{21,6,75834},{10,21,52601},{21,19,7185},{12,21,43613},{21,14,35509},{21,2,94727},{22,20,2033},{22,2,91018},{12,23,47214},{4,23,107938},{23,20,9343},{23,0,107963},{23,15,30321},{2,24,21315},{3,24,13797},{1,24,26717},{5,24,4091},{25,13,46183},{6,25,82448},{25,12,50227},{25,4,110951},{25,19,13799},{25,9,64949},{25,15,33334},{25,21,6614},{0,25,110976},{25,8,74768},{1,25,106743},{3,25,93823},{14,25,42123},{25,17,18790},{5,26,93928},{17,26,28601},{9,26,74760},{26,25,9811},{4,26,120762},{26,6,92259},{21,26,16425},{11,26,66343},{8,26,84579},{9,27,78280},{27,17,32121},{10,27,72546},{3,27,107154},{19,27,27130},{11,27,69863},{5,27,97448},{27,12,63558},{27,21,19945},{24,27,93357},{27,0,124307},{27,22,23654},{27,23,16344},{4,27,124282},{27,26,3520},{27,16,39391},{2,27,114672},{13,27,59514},{7,27,111294},{25,27,13331},{27,1,120074},{8,27,88099},{27,14,55454},{27,18,30699},{15,27,46665},{20,27,25687},{9,28,77263},{28,7,110277},{28,15,45648},{25,28,12314},{28,13,58497},{28,26,2503},{28,0,123290},{5,28,96431},{28,8,87082},{4,28,123265},{28,3,106137},{28,17,31104},{28,11,68846},{20,28,24670},{12,28,62541},{14,28,54437},{28,22,22637},{28,10,71529},{6,28,94762},{15,29,53502},{29,28,7854},{2,29,121509},{29,19,33967},{3,29,113991},{29,14,62291},{29,25,20168},{29,8,94936},{29,21,26782},{29,27,6837},{5,29,104285},{29,13,66351},{29,18,37536},{23,29,23181},{11,29,76700},{4,29,131119},{29,20,32524},{7,29,118131},{17,29,38958},{26,29,10357}};
        ret = fastPath1976.countPaths(30,roads2);
        System.out.println("Total solution = " + ret);


        int[][] roads3 = {{0,1,7958},{2,0,13122},{2,1,5164},{1,3,6011},{3,2,847},{3,0,13969},{4,3,3436},{1,4,9447},{2,4,4283},{5,2,9674},{4,5,5391},{5,0,22796},{6,5,7884},{6,0,30680},{4,6,13275},{6,3,16711},{4,7,18101},{2,7,22384},{7,6,4826},{3,8,25113},{1,8,31124},{8,6,8402},{4,8,21677},{8,7,3576},{9,5,24372},{9,1,39210},{9,6,16488},{9,2,34046},{9,8,8086},{9,3,33199},{9,4,29763},{7,9,11662},{0,9,47168},{0,10,53349},{10,3,39380},{10,9,6181},{10,2,40227},{6,10,22669},{9,11,9},{7,11,11671},{3,11,33208},{12,5,32615},{12,11,8234},{12,4,38006},{7,12,19905},{12,9,8243},{2,12,42289},{12,10,2062},{1,12,47453},{0,12,55411},{13,9,838},{14,4,42542},{13,14,11941},{3,14,45978},{14,12,4536},{14,10,6598},{0,14,59947},{7,14,24441},{11,14,12770},{14,6,29267},{5,14,37151},{1,14,51989},{8,14,20865},{9,14,12779},{15,14,9269},{15,4,51811},{11,15,22039},{15,13,21210},{16,13,13765},{10,16,8422},{16,12,6360},{3,17,28412},{1,17,34423},{17,7,6875},{10,18,10327},{13,18,15670},{18,14,3729},{17,18,21295},{18,4,46271},{18,7,28170},{18,5,40880},{19,9,31928},{19,16,17325},{3,19,65127},{18,19,15420},{19,14,19149},{7,19,43590},{19,10,25747},{12,19,23685},{19,13,31090},{19,2,65974},{19,11,31919},{19,1,71138},{19,0,79096},{19,4,61691},{15,19,9880},{19,8,40014},{17,19,36715},{19,6,48416},{5,19,56300},{20,2,71284},{14,20,24459},{20,1,76448},{17,20,42025},{20,4,67001},{18,20,20730},{7,20,48900},{20,0,84406},{20,15,15190},{20,10,31057},{3,20,70437},{20,12,28995},{6,20,53726},{20,19,5310},{9,20,37238},{3,21,78138},{21,5,69311},{12,21,36696},{0,21,92107},{21,20,7701},{6,21,61427},{21,10,38758},{7,21,56601},{21,8,53025},{18,21,28431},{21,14,32160},{15,21,22891},{21,1,84149},{21,4,74702},{21,13,44101},{21,16,30336},{19,21,13011},{22,19,7969},{6,22,56385},{22,9,39897},{22,4,69660},{22,14,27118},{22,18,23389},{22,8,47983},{22,11,39888},{22,3,73096},{20,22,2659},{0,22,87065},{22,15,17849},{22,10,33716},{22,1,79107},{7,22,51559},{16,23,32360},{23,1,86173},{23,7,58625},{23,5,71335},{23,0,94131},{2,23,81009},{23,17,51750},{22,23,7066},{23,4,76726},{18,23,30455},{23,12,38720},{23,9,46963},{23,21,2024},{2,24,57545},{16,24,8896},{25,7,60017},{25,16,33752},{25,2,82401},{25,5,72727},{25,18,31847},{25,12,40112},{11,25,48346},{0,25,95523},{25,14,35576},{13,25,47517},{25,8,56441},{21,25,3416},{25,22,8458},{1,25,87565},{25,3,81554},{25,24,24856},{19,25,16427},{25,23,1392},{25,4,78118},{11,26,32680},{14,26,19910},{12,26,24446},{3,26,65888},{26,19,761},{6,26,49177},{5,26,57061},{26,8,40775},{7,26,44351},{26,17,37476},{27,18,41220},{27,14,44949},{19,27,25800},{23,27,10765},{27,20,20490},{27,7,69390},{1,27,96938},{27,17,62515},{27,12,49485},{27,24,34229},{27,11,57719},{27,6,74216},{25,27,9373},{3,27,90927},{22,27,17831},{27,8,65814},{15,27,35680},{10,27,51547},{28,16,38891},{28,23,6531},{29,10,48802},{29,14,42204},{29,5,79355},{29,0,102151},{1,29,94193},{29,7,66645},{8,29,63069},{29,16,40380},{22,29,15086},{6,29,71471},{9,29,54983},{13,29,54145},{26,29,22294},{19,29,23055},{25,29,6628},{4,29,84746},{30,21,13997},{26,30,26247},{30,14,46157},{30,13,58098},{30,1,98146},{30,17,63723},{16,30,44333},{30,28,5442},{22,30,19039},{29,30,3953},{15,30,36888},{30,10,52755},{12,30,50693},{31,0,107933},{9,31,60765},{20,31,23527},{31,18,44257},{17,31,65552},{31,4,90528},{31,1,99975},{31,19,28837},{31,26,28076},{6,31,77253},{23,31,13802},{31,14,47986},{31,28,7271},{31,12,52522},{31,15,38717},{31,21,15826},{5,31,85137},{31,27,3037},{24,31,37266},{2,31,94811},{31,11,60756},{3,31,93964},{7,31,72427},{31,10,54584},{13,31,59927},{29,31,5782},{31,30,1829},{22,31,20868},{31,25,12410},{31,8,68851},{31,16,46162},{24,32,9170},{33,5,88098},{33,29,8743},{33,15,41678},{7,33,75388},{16,33,49123},{11,33,63717},{33,10,57545},{33,21,18787},{33,30,4790},{33,28,10232},{33,9,63726},{0,34,112235},{27,34,7339},{5,34,89439},{7,34,76729},{34,14,52288},{34,25,16712},{23,34,18104},{34,11,65058},{19,34,33139},{28,34,11573},{13,34,64229},{34,22,25170},{34,2,99113},{34,10,58886},{31,34,4302},{16,34,50464},{29,34,10084},{34,20,27829},{34,32,32398},{34,3,98266},{34,15,43019},{17,34,69854},{34,33,1341},{34,1,104277},{34,12,56824},{18,34,48559},{4,34,94830},{32,35,3408},{36,23,22052},{14,36,56236},{19,36,37087},{36,21,24076},{36,9,69015},{30,36,10079},{36,7,80677},{29,36,14032},{36,25,20660},{17,36,73802},{1,36,108225},{0,36,116183},{36,34,3948},{8,36,77101},{2,36,103061},{10,36,62834},{32,36,36346},{22,36,29118},{31,36,8250},{36,3,102214},{36,11,69006},{12,36,60772},{35,36,32938},{36,5,93387},{36,27,11287},{36,13,68177},{36,6,85503},{36,4,98778},{24,36,45516},{28,36,15521},{36,26,36326},{15,36,46967},{15,37,50314},{24,37,48863},{37,18,55854},{37,34,7295},{14,37,59583},{30,37,13426},{19,37,40434},{20,37,35124},{23,37,25399},{35,37,36285},{37,10,66181},{37,3,105561},{37,27,14634},{37,5,96734},{37,7,84024},{37,8,80448}};
        ret = fastPath1976.countPaths(38,roads3);
        System.out.println("Total solution = " + ret);

    }
    public int countPaths(int n, int[][] roads) {
        int ret = -1;
        class Path {
            int parenetIndex = -1;
            int childIndex = -1;
            int time = -1;

            @Override
            public boolean equals(Object o) {
                if (this == o) return true;
                if (o == null || getClass() != o.getClass()) return false;
                Path path = (Path) o;
                return parenetIndex == path.parenetIndex && childIndex == path.childIndex && time == path.time;
            }

            @Override
            public int hashCode() {
                return Objects.hash(parenetIndex, childIndex, time);
            }

            @Override
            public String toString() {
                return "Path{" +
                        "parenetIndex=" + parenetIndex +
                        ", childIndex=" + childIndex +
                        ", time=" + time +
                        '}';
            }
        }
        class Node {
            int index;
            List<Path> childrenPath = new ArrayList();
            int minTime = 0;
            int minCount = 0;
            boolean accessed = false;

            @Override
            public String toString() {
                return "Node{" +
                        "index=" + index +
                        ", childrenPath=" + childrenPath +
                        ", minTime=" + minTime +
                        ", minCount=" + minCount +
                        ", accessed=" + accessed +
                        '}';
            }
        }

        long t1 = System.currentTimeMillis();
        Map<Integer,Node> nodeMap = new HashMap<>();

        for(int i = 0;i<n;i++){
            if(!nodeMap.containsKey(i)) {
                Node node = new Node();
                node.index = i;
                nodeMap.put(i, node);
            }
            for(int[] path: roads){
                int child = -1;
                if(path[0] == i){
                    child = path[1];
                }else if(path[1] == i) {
                    child = path[0];
                }else{
                    continue;
                }

                boolean skip = false;
                if(nodeMap.containsKey(child)){
                    Node node = nodeMap.get(child);
                    for(Path p :node.childrenPath){
                        if(p.childIndex == i){
                            skip = true;
                        }
                    }
                }

                if(skip){
                    continue;
                }


                Node node = nodeMap.get(i);

                Path pathToChild = new Path();
                pathToChild.parenetIndex = i;
                pathToChild.childIndex = child;
                pathToChild.time = path[2];

                if(!node.childrenPath.contains(pathToChild)) {
                    node.childrenPath.add(pathToChild);
                }
            }
        }
        long t2 = System.currentTimeMillis();

        Node root = nodeMap.get(0);

        Deque<Node> theQueue = new ArrayDeque<>();
        theQueue.add(root);
        while(!theQueue.isEmpty()){
            Node node = theQueue.pop();
           // System.out.println(node);
            for(Path childPath: node.childrenPath){
                Node child = nodeMap.get(childPath.childIndex);
                theQueue.add(child);
                int curTime = node.minTime + childPath.time;
                if (!child.accessed){
                    child.accessed = true;
                    child.minTime = curTime;
                    child.minCount = 1;
                }else{
                    if(child.minTime == curTime){
                        child.minCount++;
                    }else if(child.minTime > curTime){
                        child.minTime = curTime;
                        child.minCount =1;
                    }
                }
            }

        }
        long t3 = System.currentTimeMillis();

        Node last = nodeMap.get(n-1);
        ret = last.minCount;
        System.out.println("Min time = "+ last.minTime + ", count = " + last.minCount);
        System.out.println("T1 = "+ (t2-t1) +" milliseconds, T2 = " + (t3-t2) + " milliseconds");

        return ret;
    }
}
